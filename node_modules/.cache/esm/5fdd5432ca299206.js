let JwtService,CustomErrorHandler,RefToken,User,JWT_REF_SECRET,Joi;_ca2‍.x([["default",()=>_ca2‍.o]]);_ca2‍.w("../../services.js",[["JwtService",["JwtService"],function(v){JwtService=v}],["CustomErrorHandler",["CustomErrorHandler"],function(v){CustomErrorHandler=v}]]);_ca2‍.w("../../models",[["RefToken",["RefToken"],function(v){RefToken=v}],["User",["User"],function(v){User=v}]]);_ca2‍.w("../../config",[["JWT_REF_SECRET",["JWT_REF_SECRET"],function(v){JWT_REF_SECRET=v}]]);_ca2‍.w("joi",[["default",["Joi"],function(v){Joi=v}]]);




const tokenController = {
  async refreshToken(req, res, next) {
    const tokenSchema = Joi.object({
      refToken: Joi.string().required(),
    });

    const { error } = tokenSchema.validate(req.body);

    if (error) {
      return next(error);
    }

    const { refToken } = req.body;
    let refreshToken;
    let userId;
    try {
      refreshToken = await RefToken.findOne({ refToken });
      if (!refreshToken) {
        return next(CustomErrorHandler.unAuthorized("Invalid ref token"));
      }

      const {_id} = await JwtService.verify(refToken, JWT_REF_SECRET);
      userId = _id;
    
    } catch (err) {
        return next(CustomErrorHandler.unAuthorized("Invalid ref token"));
    }

    const user = await User.findOne({ _id: userId });

    if (!user) {
      return next(CustomErrorHandler.unAuthorized("No user found"));
    }

    const accessToken = JwtService.sign({ _id: userId });
    refreshToken = JwtService.sign({ _id: userId }, "1y", JWT_REF_SECRET);

    await RefToken.create({ refToken: refreshToken });

    res.json({ accessToken, refToken: refreshToken });
  },
};

_ca2‍.d(tokenController);
